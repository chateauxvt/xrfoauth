/**
* XRF OAuth2 Initial Authentication Request API
* XRF OAuth2 Authorization server, initial authentication with the xApp API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "InitAuthReq.h"
#include "Helpers.h"

#include <sstream>

namespace xrf::model
{

InitAuthReq::InitAuthReq()
{
    m_Certificate = "";
    m_NfInstanceId = "";
    m_HxrfInitAuthUri = "";
    m_HxrfInitAuthUriIsSet = false;
    
}

void InitAuthReq::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw xrf::helpers::ValidationException(msg.str());
    }
}

bool InitAuthReq::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool InitAuthReq::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "InitAuthReq" : pathPrefix;

                
    return success;
}

bool InitAuthReq::operator==(const InitAuthReq& rhs) const
{
    return
    
    
    (getCertificate() == rhs.getCertificate())
     &&
    
    (getNfInstanceId() == rhs.getNfInstanceId())
     &&
    
    
    ((!hxrfInitAuthUriIsSet() && !rhs.hxrfInitAuthUriIsSet()) || (hxrfInitAuthUriIsSet() && rhs.hxrfInitAuthUriIsSet() && getHxrfInitAuthUri() == rhs.getHxrfInitAuthUri()))
    
    ;
}

bool InitAuthReq::operator!=(const InitAuthReq& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InitAuthReq& o)
{
    j = nlohmann::json();
    j["certificate"] = o.m_Certificate;
    j["nfInstanceId"] = o.m_NfInstanceId;
    if(o.hxrfInitAuthUriIsSet())
        j["hxrfInitAuthUri"] = o.m_HxrfInitAuthUri;
    
}

void from_json(const nlohmann::json& j, InitAuthReq& o)
{
    j.at("certificate").get_to(o.m_Certificate);
    j.at("nfInstanceId").get_to(o.m_NfInstanceId);
    if(j.find("hxrfInitAuthUri") != j.end())
    {
        j.at("hxrfInitAuthUri").get_to(o.m_HxrfInitAuthUri);
        o.m_HxrfInitAuthUriIsSet = true;
    } 
    
}

std::string InitAuthReq::getCertificate() const
{
    return m_Certificate;
}
void InitAuthReq::setCertificate(std::string const& value)
{
    m_Certificate = value;
}
std::string InitAuthReq::getNfInstanceId() const
{
    return m_NfInstanceId;
}
void InitAuthReq::setNfInstanceId(std::string const& value)
{
    m_NfInstanceId = value;
}
std::string InitAuthReq::getHxrfInitAuthUri() const
{
    return m_HxrfInitAuthUri;
}
void InitAuthReq::setHxrfInitAuthUri(std::string const& value)
{
    m_HxrfInitAuthUri = value;
    m_HxrfInitAuthUriIsSet = true;
}
bool InitAuthReq::hxrfInitAuthUriIsSet() const
{
    return m_HxrfInitAuthUriIsSet;
}
void InitAuthReq::unsetHxrfInitAuthUri()
{
    m_HxrfInitAuthUriIsSet = false;
}


} // namespace xrf::model

